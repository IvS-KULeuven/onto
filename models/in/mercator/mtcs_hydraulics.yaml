########################################################################################################################
#                                                                                                                      #
# Model of the hydraulics software.                                                                                    #
#                                                                                                                      #
########################################################################################################################

!IMPORT models/in/mercator/mtcs_common.yaml:
!IMPORT models/in/mercator/mtcs_safety.yaml:


########################################################################################################################
# Define the containing PLC library
########################################################################################################################

!LIBRARY mtcs_hydraulics:

  ########################################################################################################################
  # HydraulicsPumpsStates
  ########################################################################################################################
  
  !ENUMERATION HydraulicsPumpsStates:
      items:
          [   "STOPPED",
              "POWERING_ON",
              "RESETTING_DRIVES",
              "COMMANDING_SAFETY",
              "BUILDING_UP_PRESSURE",
              "RUNNING",
              "STOPPING",
              "POWERING_OFF",
              "MANUAL",
              "ERROR"
          ]
  
  
  ########################################################################################################################
  # HydraulicsConfig
  ########################################################################################################################
  
  !CONFIG HydraulicsConfig:
      items:
          top                            : { comment: "Top side settings" }
          bottom                         : { comment: "Bottom side settings" }
          controlCycleTime               : { type: t_double                      , comment: "Cycle time in seconds of the control loop (old system: 60.0)" }
          controlHysteresis              : { type: t_double                      , comment: "Don't change the frequency setpoint if the error is below this value (in Hz) (old system: 1.0)" }
          buildUpPressureTime            : { type: t_double                      , comment: "Time in seconds during startup, when the pumps must run at maxFrequency" }
          bearingTemperature             : { type: mtcs_common.MeasurementConfig , comment: "Oil temperature measured at the bearing" }
          stoppingTime                   : { type: t_double                      , comment: "Time in seconds during stopping" }
          pumpsPowerOnTIme               : { type: t_double                      , comment: "Time in seconds to wait while powering on" }
          pumpsPowerOffTIme              : { type: t_double                      , comment: "Time in seconds to wait while powering off" }
  
  
  ########################################################################################################################
  # HydraulicsSideConfig
  ########################################################################################################################
  
  !CONFIG HydraulicsSideConfig:
      typeOf: [ HydraulicsConfig.top, HydraulicsConfig.bottom ]
      items:
          minFrequency                    : { type: t_double                      , comment: "Minimum allowed frequency in Hz (old system: 50.0 for both pumps)"}
          maxFrequency                    : { type: t_double                      , comment: "Maximum allowed frequency in Hz (old system: 100.0 for both pumps)"}
          pressureMeasurement             : { type: mtcs_common.MeasurementConfig , comment: "Pressure measurement config, in Bar" }
          pressureSensorFullScale         : { type: t_double                      , comment: "Sensor full scale range, in Bar" }
          frequencyMeasurement            : { type: mtcs_common.MeasurementConfig , comment: "Frequency measurement config, in Hertz" }
          frequencyMeasurementFullScale   : { type: t_double                      , comment: "Measurement full scale range, in Hertz" }
          conversionCoefficientA          : { type: t_double                      , comment: "Coefficient 'a' of formula: Frequency[Hz] = a * temp[Celsius]^2 + b * temp[Celsius] + c" }
          conversionCoefficientB          : { type: t_double                      , comment: "Coefficient 'b' of formula: Frequency[Hz] = a * temp[Celsius]^2 + b * temp[Celsius] + c" }
          conversionCoefficientC          : { type: t_double                      , comment: "Coefficient 'c' of formula: Frequency[Hz] = a * temp[Celsius]^2 + b * temp[Celsius] + c" }
  
  
  ########################################################################################################################
  # Hydraulics
  ########################################################################################################################
  
  !STATEMACHINE Hydraulics:
      variables:
          editableConfig                  : { type: HydraulicsConfig                    , comment: "Editable configuration of the Safety subsystem" }
          circulationFilterGOK            : { type: t_bool, address: "%I*"              , comment: "TRUE if there is no overpressure for circulation filter G" }
          circulationFilterDOK            : { type: t_bool, address: "%I*"              , comment: "TRUE if there is no overpressure for circulation filter D" }
          oilLevelTooHigh                 : { type: t_bool, address: "%I*"              , comment: "TRUE if the oil level is too high (--> problem!)" }
          pumpsState                      : { type: HydraulicsPumpsStates               , comment: "The current state of the pumps"}
          pumpsStatus                     : { type: t_string                            , comment: "Textual representation of the current pumps status"  }
      references:
          operatorStatus                  : { type: mtcs_common.OperatorStatus          , comment: "Shared operator status" }
          safetyHydraulics                : { type: mtcs_safety.SafetyHydraulics        , comment: "The hydraulics part of the safety system" }
          safetyIO                        : { type: mtcs_safety.SafetyIO                , comment: "The I/O part of the safety system"       , expand: false}
      variables_read_only:
          config                          : { type: HydraulicsConfig                    , comment: "Active configuration of the Hydraulics subsystem" }
          bearingTemperature              : { type: mtcs_common.TemperatureMeasurement  , comment: "Temperature measured at the bearing" }
      parts:
          circulationPumpRelay            : { type: mtcs_common.SimpleRelay             , comment: "Relay to power on/off the circulation pump" }
          pumpsPowerRelay                 : { type: mtcs_common.SimpleRelay             , comment: "Relay to power on/off the pumps" }
          top:
              comment                     : "Top side"
              arguments:
                  operatorStatus          : {}
                  operatingStatus         : {}
                  safetyHydraulics        : {}
                  config                  : {}
                  hydraulicsConfig        : {}
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
                          busyStatus      : { type: mtcs_common.BusyStatus   }
          bottom:
              comment                     : "Bottom side"
              arguments:
                  operatorStatus          : {}
                  operatingStatus         : {}
                  safetyHydraulics        : {}
                  config                  : {}
                  hydraulicsConfig        : {}
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
                          busyStatus      : { type: mtcs_common.BusyStatus   }
          io:
              comment                     : "I/O modules"
              arguments:
                  safetyIO                : { type: mtcs_safety.SafetyHydraulics, expand: false }
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
          configManager:
              comment                     : "The config manager (to load/save/activate configuration data)"
              type                        : mtcs_common.ConfigManager
      statuses:
          initializationStatus            : { type: mtcs_common.InitializationStatus }
          healthStatus                    : { type: mtcs_common.HealthStatus }
          busyStatus                      : { type: mtcs_common.BusyStatus }
          operatingStatus                 : { type: mtcs_common.OperatingStatus }
      processes:
          initialize                      : { type: mtcs_common.Process                       , comment: "Start initializing" }
          lock                            : { type: mtcs_common.Process                       , comment: "Lock the system" }
          unlock                          : { type: mtcs_common.Process                       , comment: "Unlock the system" }
          changeOperatingState            : { type: mtcs_common.ChangeOperatingStateProcess   , comment: "Change the operating state (e.g. AUTO, MANUAL, ...)" }
          startUpPumps                    : { type: mtcs_common.Process                       , comment: "Start up the pumps" }
          stopPumps                       : { type: mtcs_common.Process                       , comment: "Stop the pumps" }
      calls:
          initialize:
              isEnabled                   : !OR [ statuses.initializationStatus.shutdown,
                                                  statuses.initializationStatus.initializingFailed,
                                                  statuses.initializationStatus.initialized ]
          lock:
              isEnabled                   : !AND [ operatorStatus.tech, statuses.initializationStatus.initialized ]
          unlock:
              isEnabled                   : !AND [ operatorStatus.tech, statuses.initializationStatus.locked ]
          changeOperatingState:
              isEnabled                   : !AND [ statuses.busyStatus.idle, operatorStatus.tech ]
  #        operatingStatus:
  #            superState                  : statuses.initializationStatus.initialized
          healthStatus:
              isGood                      : !AND [ 
                                                  !MTCS_SUMMARIZE_GOOD [ parts.io,
                                                                         parts.configManager,
                                                                         processes.initialize,
                                                                         processes.lock,
                                                                         processes.unlock,
                                                                         processes.changeOperatingState,
                                                                         safetyHydraulics ],
                                                  circulationFilterGOK,
                                                  circulationFilterDOK,
                                                  !NOT [  oilLevelTooHigh  ],
                                                  !NOT [  !EQ [ pumpsState, HydraulicsPumpsStates.ERROR ] ] ]
              hasWarning                  : !OR [ 
                                                  !MTCS_SUMMARIZE_WARN [ parts.io,
                                                                         parts.configManager,
                                                                         processes.initialize,
                                                                         processes.lock,
                                                                         processes.unlock,
                                                                         processes.changeOperatingState ],
                                                  bearingTemperature.statuses.healthStatus.hasWarning,
                                                  bearingTemperature.statuses.healthStatus.bad,
                                                  !EQ [ pumpsState, HydraulicsPumpsStates.MANUAL ] ]
          busyStatus:
              isBusy                      : !OR [ statuses.initializationStatus.initializing,
                                                  processes.initialize.statuses.busyStatus.busy,
                                                  processes.lock.statuses.busyStatus.busy,
                                                  processes.unlock.statuses.busyStatus.busy,
                                                  processes.changeOperatingState.statuses.busyStatus.busy,
                                                  processes.startUpPumps.statuses.busyStatus.busy,
                                                  processes.stopPumps.statuses.busyStatus.busy ]
          configManager:
              isEnabled                   : operatorStatus.tech
          bearingTemperature:
              config                      : config.bearingTemperature
          io:
              safetyIO                    : safetyIO
          top:
              operatorStatus              : operatorStatus
              operatingStatus             : statuses.operatingStatus
              safetyHydraulics            : safetyHydraulics
              config                      : config.top
              hydraulicsConfig            : config
          bottom:
              operatorStatus              : operatorStatus
              operatingStatus             : statuses.operatingStatus
              safetyHydraulics            : safetyHydraulics
              config                      : config.bottom
              hydraulicsConfig            : config
          startUpPumps:
              isEnabled                   : !AND [ 
                                                  statuses.initializationStatus.initialized,
                                                  !OR [ !EQ [ pumpsState, HydraulicsPumpsStates.STOPPED ],
                                                        !EQ [ pumpsState, HydraulicsPumpsStates.MANUAL  ],
                                                        !EQ [ pumpsState, HydraulicsPumpsStates.ERROR   ] ] ]
          stopPumps:
              isEnabled                   : !AND [ 
                                                  statuses.initializationStatus.initialized,
                                                  !OR [ !EQ [ pumpsState, HydraulicsPumpsStates.RUNNING ],
                                                        !EQ [ pumpsState, HydraulicsPumpsStates.MANUAL  ],
                                                        !EQ [ pumpsState, HydraulicsPumpsStates.ERROR   ] ] ]
          circulationPumpRelay:
              isEnabled                   : !AND [ statuses.busyStatus.idle, 
                                                   operatorStatus.tech, 
                                                   statuses.operatingStatus.manual ]
          pumpsPowerRelay:
              isEnabled                   : !AND [ statuses.busyStatus.idle, operatorStatus.tech ]
  
  
  ########################################################################################################################
  # HydraulicsSide
  ########################################################################################################################
  
  !STATEMACHINE HydraulicsSide:
      typeOf                      : [ HydraulicsParts.top, HydraulicsParts.bottom ]
      references:
          operatorStatus          : { type: mtcs_common.OperatorStatus }
          operatingStatus         : { type: mtcs_common.OperatingStatus }
          safetyHydraulics        : { type: mtcs_safety.SafetyHydraulics, expand: false }
          config                  : { type: HydraulicsSideConfig }
          hydraulicsConfig        : { type: HydraulicsConfig }
      variables:
          entranceFilter1OK       : { type: t_bool, address: "%I*"        , comment: "TRUE if there is no overpressure for entrance filter 1" }
          entranceFilter2OK       : { type: t_bool, address: "%I*"        , comment: "TRUE if there is no overpressure for entrance filter 2" }
          entranceFilter3OK       : { type: t_bool, address: "%I*"        , comment: "TRUE if there is no overpressure for entrance filter 3" }
          entranceFilter4OK       : { type: t_bool, address: "%I*"        , comment: "TRUE if there is no overpressure for entrance filter 4" }
      variables_read_only:
          driveTripOK             : { type: t_bool                        , comment: "TRIP output of the drive, as copied from the safety system"}
          driveRelease            : { type: t_bool                        , comment: "Release output of the drive (ReglerFreigabe RFR), as copied from the safety system"}
          driveMinFrequency       : { type: t_bool                        , comment: "Minimum frequency output of the drive (QMIN), as copied from the safety system"}
          # measured values
          pressureMeasurement     : { type: mtcs_common.PressureMeasurement , comment: "Pressure measurement" }
          frequencyMeasurement    : { type: mtcs_common.FrequencyMeasurement, comment: "Frequency measurement" }
          # setpoints
          driveSetpoint           : { type: mtcs_common.Frequency           , comment: "Frequency setpoint actually used" }
          driveSetpointSignal     : { type: t_int16, address: "%Q*"         , comment: "Raw signal value of the frequency setpoint" }
          resetDriveSignal        : { type: t_bool , address: "%Q*"         , comment: "Output to reset the drive" }
      statuses:
          healthStatus            : { type: mtcs_common.HealthStatus        , comment: "Is the hydraulics side in a healthy state? Good=RUN, Bad=safe stopped"  }
          busyStatus              : { type: mtcs_common.BusyStatus          , comment: "Is the hydraulics side busy?"  }
      processes:
          resetDrive              : { type: mtcs_common.Process                         , comment: "Reset the drive" }
          changeFrequencySetpoint : { type: mtcs_common.ChangeSetpointProcess           , comment: "Change the frequency setpoint, in Hertz" }
      calls:
          # statuses
          healthStatus:
              isGood              : !AND [ 
                                              !MTCS_SUMMARIZE_GOOD [ processes.resetDrive,
                                                                     processes.changeFrequencySetpoint ],
                                              !OR [ pressureMeasurement.statuses.healthStatus.isGood, 
                                                    pressureMeasurement.statuses.enabledStatus.disabled ],
                                              !OR [ frequencyMeasurement.statuses.healthStatus.isGood, 
                                                    frequencyMeasurement.statuses.enabledStatus.disabled ],
                                              entranceFilter1OK,
                                              entranceFilter2OK,
                                              entranceFilter3OK,
                                              entranceFilter4OK,
                                              driveTripOK ]
              hasWarning           : !MTCS_SUMMARIZE_WARN [ processes.changeFrequencySetpoint,
                                                            pressureMeasurement,
                                                            frequencyMeasurement ]
          busyStatus:
              isBusy                : !OR [ processes.changeFrequencySetpoint.statuses.busyStatus.busy,
                                            processes.resetDrive.statuses.busyStatus.busy ]
          pressureMeasurement:
              config                : config.pressureMeasurement
              conversionFactor      : !DIV [
                                              config.pressureSensorFullScale,
                                              !DOUBLE "2**15"
                                           ]
          frequencyMeasurement:
              config                : config.frequencyMeasurement
              conversionFactor      : !DIV [
                                              config.frequencyMeasurementFullScale,
                                              !DOUBLE "2**15"
                                           ]
          changeFrequencySetpoint:
              isEnabled               : !AND [ statuses.busyStatus.idle,
                                               operatingStatus.manual,
                                               operatorStatus.tech ]
          resetDrive:
              isEnabled               : !AND [ statuses.busyStatus.idle, operatorStatus.tech ]
  
  
  ########################################################################################################################
  # HydraulicsIO
  ########################################################################################################################
  
  !STATEMACHINE HydraulicsIO:
      typeOf              : [ HydraulicsParts.io ]
      references:
          safetyIO        : { type: mtcs_safety.SafetyIO       , comment: "The safety I/O"  }
      statuses:
          healthStatus    : { type: mtcs_common.HealthStatus   , comment: "Is the I/O in a healthy state?"  }
      parts:
          pumpsGroup:
              comment     : "PG: Pumps Group"
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
      calls:
          healthStatus:
              isGood      : !MTCS_SUMMARIZE_GOOD [ safetyIO, parts.pumpsGroup ]
              hasWarning  : !MTCS_SUMMARIZE_WARN [ safetyIO, parts.pumpsGroup ]
  
  
  ########################################################################################################################
  # HydraulicsPumpsGroupIO
  ########################################################################################################################
  
  !STATEMACHINE HydraulicsPumpsGroupIO:
      typeOf              : [ HydraulicsIOParts.pumpsGroup ]
      statuses:
          healthStatus    : { type: mtcs_common.HealthStatus   , comment: "Is the I/O in a healthy state?"  }
      parts:
          COU             : { type: mtcs_common.EtherCatDevice , comment: "PG:COU (EK1101)" }
          DI1             : { type: mtcs_common.EtherCatDevice , comment: "PG:DI1 (EL1008)" }
          SI1             : { type: mtcs_common.EtherCatDevice , comment: "PG:SI1 (EL1904)" }
          SI2             : { type: mtcs_common.EtherCatDevice , comment: "PG:SI2 (EL1904)" }
          SI3             : { type: mtcs_common.EtherCatDevice , comment: "PG:SI3 (EL1904)" }
          DI2             : { type: mtcs_common.EtherCatDevice , comment: "PG:DI2 (EL1008)" }
      calls:
          COU:
              id          : !STRING "PG:COU"
              typeId      : !STRING "EK1101"
          DI1:
              id          : !STRING "PG:DI1"
              typeId      : !STRING "EL1008"
          SI1:
              id          : !STRING "PG:SI1"
              typeId      : !STRING "EL1904"
          SI2:
              id          : !STRING "PG:SI2"
              typeId      : !STRING "EL1904"
          SI3:
              id          : !STRING "PG:SI3"
              typeId      : !STRING "EL1904"
          DI2:
              id          : !STRING "PG:DI2"
              typeId      : !STRING "EL1008"
          healthStatus:
              isGood      : !MTCS_SUMMARIZE_GOOD [ parts.COU,
                                                   parts.DI1,
                                                   parts.SI1,
                                                   parts.SI2,
                                                   parts.SI3,
                                                   parts.DI2 ]
              hasWarning  : !MTCS_SUMMARIZE_WARN [ parts.COU,
                                                   parts.DI1,
                                                   parts.SI1,
                                                   parts.SI2,
                                                   parts.SI3,
                                                   parts.DI2 ]
  
  