########################################################################################################################
#                                                                                                                      #
# Model of the M3 software.                                                                                            #
#                                                                                                                      #
########################################################################################################################


!IMPORT models/in/mercator/mtcs_common.yaml:
!IMPORT models/in/mercator/mtcs_telemetry.yaml:


########################################################################################################################
# Define the containing PLC library
########################################################################################################################

!LIBRARY mtcs_m3:

  
  ########################################################################################################################
  # M3KnownPositionIDs
  ########################################################################################################################
  
  !ENUMERATION M3PositionIDs:
      items:
          [   "UNKNOWN",
              "CASSEGRAIN",
              "NASMYTH_A",
              "NASMYTH_B",
              "NASMYTH_C",
              "NASMYTH_D",
              "OTHER_0",
              "OTHER_1",
              "OTHER_2",
              "OTHER_3",
              "OTHER_4" ]
  
  
  ########################################################################################################################
  # M3GotoProcedureStates
  ########################################################################################################################
  !ENUMERATION M3GotoProcedureStates:
      items:
          [   "IDLE",
              "ABORTED",
              "PREPARE_PROCESS",
              "GOING_TO_POSITION",
              "IMPROVING_POSITION",
              "ERROR",
              "RESETTING",
              "ABORTING"   ]
  
  
  ########################################################################################################################
  # M3RotateProcedureStates
  ########################################################################################################################
  
  !ENUMERATION M3RotateProcedureStates:
      items:
          [   "IDLE",
              "ABORTED",
              "PREPARE_PROCESS",
              "DECOUPLING_AXES",
              "ENABLING_AXES",
              "UNDOING_OFFSET",
              "COUPLING_AXES",
              "BOTH_GOING_TO_TARGET_PLUS_OFFSET",
              "DECOUPLING_AXES_AGAIN",
              "MOVING_ABL_TO_FINAL_POSITION",
              "DISABLING_ABL",
              "MOVING_POS_TO_FINAL_POSITION",
              "IMPROVING_POSITION",
              "DISABLING_POS",
              "ERROR",
              "RESETTING",
              "ABORTING" ]
  
  
  ########################################################################################################################
  # M3TranslateProcedureStates
  ########################################################################################################################
  !ENUMERATION M3TranslateProcedureStates:
      items:
          [   "IDLE",
              "ABORTED",
              "PREPARE_PROCESS",
              "ENABLING_AXIS",
              "MOVING",
              "IMPROVING_POSITION",
              "DISABLING_AXIS",
              "ERROR",
              "RESETTING",
              "ABORTING"    ]
  
  
  ########################################################################################################################
  # M3TranslationHomingProcedureStates
  ########################################################################################################################
  !ENUMERATION M3TranslationHomingProcedureStates:
      items:
          [   "IDLE",
              "ABORTED",
              "PREPARE_PROCESS",
              "ENABLING_AXIS",
              "MOVE_TO_LIMIT_SWITCH",
              "WAIT_FOR_LIMIT_SWITCH",
              "STOP",
              "APPLY_HOMING_SETTINGS",
              "MOVE_TO_MECH_STOP",
              "WAIT_FOR_MECH_STOP",
              "SET_ZERO_POSITION",
              "DISABLE_AXIS",
              "RESETTING",
              "ERROR",
              "ABORTING"    ]
  
  
  ########################################################################################################################
  # M3CalibrateRotationProcedureStates
  ########################################################################################################################
  !ENUMERATION M3CalibrateRotationProcedureStates:
      items:
          [   "IDLE",
              "ABORTED",
              "PREPARE_PROCESS",
              "DECOUPLING_AXES",
              "ENABLING_AXES",
              "COUPLING_AXES",
              "GOING_TO_START_POSITION",
              "DECOUPLING_AXES_AGAIN",
              "START_MOVING",
              "WAIT_UNTIL_MOVING_STABLE",
              "WAIT_UNTIL_RANGE_PASSED",
              "HALT",
              "GO_TO_CLUTCH_ZERO_TORQUE",
              "DISABLING_AXES",
              "WAIT_UNTIL_STANDSTILL",
              "SYNC_AXES",
              "ERROR",
              "RESETTING",
              "ABORTING" ]
  
  
  ########################################################################################################################
  # M3PositionStates
  ########################################################################################################################
  !ENUMERATION M3TargetStates:
      items:
          [ "NO_TARGET_GIVEN",
            "KNOWN_POSITION",
            "NEW_POSITION" ]
  
  
  ########################################################################################################################
  # M3TargetStatus
  ########################################################################################################################
  !STATUS M3TargetStatus:
      variables:
          "state":
              type: M3TargetStates
              comment: "Enum!"
      states:
          "noTargetGiven":
              expr: !EQ [ state, M3TargetStates.NO_TARGET_GIVEN ]
              comment: "No target given"
          "knownPosition":
              expr: !EQ [ state, M3TargetStates.KNOWN_POSITION ]
              comment: "Known position"
          "newPosition":
              expr: !EQ [ state, M3TargetStates.NEW_POSITION ]
              comment: "Undefined"
  
  
  ########################################################################################################################
  # M3PositionConfig
  ########################################################################################################################
  !CONFIG M3PositionConfig:
      items:
          name:
              type: t_string
              comment: "The name of the M3 position"
          rotationPosition:
              type: t_double
              comment: "The position of the rotation stage in degrees"
          rotationOffset:
              type: t_double
              comment: "The offset between the positions of the two motors of the rotation stage in degrees"
          translationPosition:
              type: t_double
              comment: "The position of the translation stage in millimeters"
          doRotation:
              type: t_bool
              comment: "Do a rotation for this position (TRUE) or not (FALSE)"
          doTranslation:
              type: t_bool
              comment: "Do a translation for this position (TRUE) or not (FALSE)"
  
  
  ########################################################################################################################
  # M3KnownPositionsConfig
  ########################################################################################################################
  !CONFIG M3KnownPositionsConfig:
      items:
          cassegrain     : { type: M3PositionConfig, comment : "Cassegrain"                   , expand: false }
          nasmythA       : { type: M3PositionConfig, comment : "Nasmyth A"                    , expand: false }
          nasmythB       : { type: M3PositionConfig, comment : "Nasmyth B"                    , expand: false }
          nasmythC       : { type: M3PositionConfig, comment : "Nasmyth C"                    , expand: false }
          nasmythD       : { type: M3PositionConfig, comment : "Nasmyth D"                    , expand: false }
          other0         : { type: M3PositionConfig, comment : "Freely choosable position 0"  , expand: false }
          other1         : { type: M3PositionConfig, comment : "Freely choosable position 1"  , expand: false }
          other2         : { type: M3PositionConfig, comment : "Freely choosable position 2"  , expand: false }
          other3         : { type: M3PositionConfig, comment : "Freely choosable position 3"  , expand: false }
          other4         : { type: M3PositionConfig, comment : "Freely choosable position 4"  , expand: false }
  
  
  ########################################################################################################################
  # M3RotationConfig
  ########################################################################################################################
  !CONFIG M3RotationConfig:
      items:
          standstillTolerance:
              type: t_double
              comment: "The tolerance for which the axis appears to be standing still, in degrees/sec"
          motorToMirrorRatio:
              type: t_double
              comment: "The motor-to-mirror transmission ratio"
          encoderToMirrorRatio:
              type: t_double
              comment: "The encoder-to-mirror transmission ratio"
          positioningDrive:
              type: mtcs_common.FaulhaberDriveConfig
              comment: "The config of the positioning faulhaber drive"
              expand: false
          antiBacklashDrive:
              type: mtcs_common.FaulhaberDriveConfig
              comment: "The config of the anti-backlash faulhaber drive"
              expand: false
          negativeSoftLimit:
              type: t_double
              comment: "Negative soft limit, in degrees"
          positiveSoftLimit:
              type: t_double
              comment: "Negative soft limit, in degrees"
          maxPositionError:
              type: t_double
              comment: "Maximum position error, in degrees"
          maxOffsetError:
              type: t_double
              comment: "Maximum position error, in degrees"
          gotoOffsetVelocity: # e.g. 6.0
              type: t_double
              comment: "Velocity to move from/to the offset position, in degrees/sec on the MOTOR reduction exit shaft reference system"
          gotoTargetVelocity: # e.g. 6.0
              type: t_double
              comment: "Velocity to move to the target, in degrees/sec on the MIRROR reference system"
          gotoImprovingPositionTime: # e.g. 3.0
              type: t_double
              comment: "Time while the Goto procedure may improve the position, in seconds"
          calibrateStartPosition: # e.g. 50.0
              type: t_double
              comment: "Mirror position (in degrees) to start the calibration from"
          calibrateMoveToZeroTorqueVelocity: # e.g. 1.0
              type: t_double
              comment: "Velocity to move to the zero-torque position, in degrees/sec on the MIRROR reference system"
          calibrateVelocity: # e.g. 1.0
              type: t_double
              comment: "Velocity during which the current is being measured, in degrees/sec on the MIRROR reference system"
          calibrateRange: # e.g. 70.0
              type: t_double
              comment: "Position range where the current is being measured, in degrees on the MOTOR reference system"
          calibrateOffset: # e.g. 30.0
              type: t_double
              comment: "Degrees between zero-torque position and minimum-torque position, on the MOTOR reference system"
  
  
  ########################################################################################################################
  # M3TranslationConfig
  ########################################################################################################################
  !CONFIG M3TranslationConfig:
      items:
          homingContinuousCurrentLimit:
              type: t_uint16
              comment: "The continuous current limit for the translation stage motor in milliAmps, during homing"
          homingPeakCurrentLimit:
              type: t_uint16
              comment: "The peak current limit for the translation stage motor in milliAmps, during homing"
          homingSearchLimitSwitchVelocity:
              type: t_double
              comment: "The velocity of the motor shaft during homing, in mm/sec"
          homingToHardwareStopVelocity:
              type: t_double
              comment: "The velocity of the motor shaft during homing, in mm/sec"
          standstillTolerance:
              type: t_double
              comment: "The tolerance for which the axis appears to be standing still, in mm/sec"
          motorDrive:
              type: mtcs_common.FaulhaberDriveConfig
              comment: "The config of the faulhaber drive"
              expand: false
          negativeSoftLimit:
              type: t_double
              comment: "Negative soft limit, in millimeters"
          positiveSoftLimit:
              type: t_double
              comment: "Negative soft limit, in millimeters"
          maxPositionError:
              type: t_double
              comment: "Maximum position error, in millimeters"
          drawCassegrainLimit:
              type: t_double
              comment: "Below this limit (in millimeters) the mirror will be drawn flipped away"
          drawNasmythLimit:
              type: t_double
              comment: "Above this limit (in millimeters) the mirror will be drawn frontal"
          gotoImprovingPositionTime:
              type: t_double
              comment: "Time while the Goto procedure may improve the position, in seconds"
          gotoVelocity:
              type: t_double
              comment: "Velocity to go to a new position, in degrees/second"
  
  
  ########################################################################################################################
  # M3Config
  ########################################################################################################################
  
  !CONFIG M3Config:
      items:
          knownPositions:
              comment: "All known M3 positions"
              type:    M3KnownPositionsConfig
              expand:  false
          rotation:
              comment: "The settings of the rotation stage"
              type:    M3RotationConfig
              expand:  false
          translation:
              comment: "The settings of the translation stage"
              type:    M3TranslationConfig
              expand:  false
          moveAfterInitialization:
              comment: "Move the mirror to a known position after initialization"
              type:    t_bool
          moveAfterInitializationPosition:
              comment: "Move the mirror to this position after initialization"
              type:    t_string
  
  
  
  ########################################################################################################################
  # M3GotoKnownPosition
  ########################################################################################################################

  !PROCESS M3GotoKnownPosition:
      extends: mtcs_common.BaseProcess
      arguments:
          name : { type: t_string, comment: "Name of the position (must be configured in M3Config.knownPositions!)" }
  
  
  ########################################################################################################################
  # GotoNewPosition
  ########################################################################################################################

  !PROCESS M3GotoNewPosition:
      extends: mtcs_common.BaseProcess
      arguments:
          rotationPosition     : { type: t_double, comment: "Position of the rotation stage, in degrees" }
          rotationOffset       : { type: t_double, comment: "Offset between the motors of the rotation stage, in degrees" }
          translationPosition  : { type: t_double, comment: "Position of the rotation stage, in millimeters" }
          doRotation           : { type: t_bool  , comment: "Do a rotation for this position (TRUE) or not (FALSE)" }
          doTranslation        : { type: t_bool  , comment: "Do a translation for this position (TRUE) or not (FALSE)" }
  
  
  ########################################################################################################################
  # M3RotationTarget
  ########################################################################################################################
  
  !STATEMACHINE M3RotationTarget:
      variables_hidden:
          isTargetGiven               : { type: t_bool                             , comment: "TRUE if a target is given" }
          newPositionDegrees          : { type: t_double                           , comment: "New target position in degrees" }
          newOffsetDegrees            : { type: t_double                           , comment: "New target offset in degrees" }
      references:
          knownPositions      : { type: M3KnownPositionsConfig      , comment: "The known positions"}
      variables_read_only:
          name                : { type: t_string                    , comment: "Name of the target (only in case the position and offset match an entry in the config!)" }
          position            : { type: mtcs_common.AngularPosition , comment: "Target position for M3 rotation (only in case statuses.targetStatus.noTargetGiven is FALSE)" }
          offset              : { type: mtcs_common.AngularPosition , comment: "Target offset for M3 rotation (only in case statuses.targetStatus.noTargetGiven is FALSE)"}
      statuses:
          targetStatus        : { type: M3TargetStatus }
      calls:
          position:
              newDegreesValue : newPositionDegrees
          offset:
              newDegreesValue : newOffsetDegrees
  
  
  ########################################################################################################################
  # M3TranslationTarget
  ########################################################################################################################
  
  !STATEMACHINE M3TranslationTarget:
      variables_hidden:
          isTargetGiven           : { type: t_bool, initial: !BOOL "FALSE"  , comment: "TRUE if a target is given" }
          newPositionMillimeters  : { type: t_double                        , comment: "New target position in millimeters" }
      references:
          knownPositions          : { type: M3KnownPositionsConfig          , comment: "The known positions", expand: false}
      variables_read_only:
          name                    : { type: t_string                        , comment: "Name of the target (only in case the position matches an entry in the config!)" }
          position                : { type: mtcs_common.LinearPosition      , comment: "Target position for M3 translation (only in case statuses.targetStatus.noTargetGiven is FALSE)" }
      statuses:
          targetStatus            : { type: M3TargetStatus }
      calls:
          position:
              newMillimetersValue : newPositionMillimeters
  
  
  ########################################################################################################################
  # M3
  ########################################################################################################################
  
  !STATEMACHINE M3:
      variables:
          editableConfig                  : { type: M3Config                    , comment: "Editable configuration of M3" , expand: false }
      references:
          operatorStatus                  : { type: mtcs_common.OperatorStatus  , comment: "Shared operator status"}
      variables_read_only:
          config                          : { type: M3Config           , comment: "Active configuration of M3" }
          actualKnownPositionName         : { type: t_string           , comment: "Name of the actual position according to config.knownPositions" }
          actualKnownPositionID           : { type: M3PositionIDs      , comment: "ID of the actual position according to config.knownPositions" }
      parts:
          rotation:
              comment                     : "Rotation mechanism"
              arguments:
                  initializationStatus    : { type: mtcs_common.InitializationStatus , expand: false }
                  operatingStatus         : { type: mtcs_common.OperatingStatus      , expand: false }
                  operatorStatus          : { type: mtcs_common.OperatorStatus       , expand: false }
                  config                  : {}
                  m3Config                : { type: M3Config                         , expand: false }
              attributes:
                  procedures              : {}
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
                          busyStatus      : { type: mtcs_common.BusyStatus }
          translation:
              comment                     : "Translation mechanism"
              arguments:
                  initializationStatus    : { type: mtcs_common.InitializationStatus , expand: false }
                  operatingStatus         : { type: mtcs_common.OperatingStatus      , expand: false }
                  operatorStatus          : { type: mtcs_common.OperatorStatus       , expand: false }
                  config                  : {}
                  m3Config                : { type: M3Config                         , expand: false }
              attributes:
                  procedures              : {}
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
                          busyStatus      : { type: mtcs_common.BusyStatus }
          io:
              comment                     : "I/O modules"
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
          gotoProcedure:
              comment                     : "The goto procedure"
              arguments:
                  rotation                : {}
                  translation             : {}
                  m3Config                : {}
              attributes:
                  isGotoAllowed           : {}
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
                          busyStatus      : { type: mtcs_common.BusyStatus   }
          configManager:
              comment                     : "The config manager (to load/save/activate configuration data)"
              type                        : mtcs_common.ConfigManager
      statuses:
          initializationStatus            : { type: mtcs_common.InitializationStatus }
          apertureStatus                  : { type: mtcs_common.ApertureStatus }
          healthStatus                    : { type: mtcs_common.HealthStatus }
          busyStatus                      : { type: mtcs_common.BusyStatus }
          operatingStatus                 : { type: mtcs_common.OperatingStatus }
      processes:
          initialize                      : { type: mtcs_common.Process                       , comment: "Start initializing" }
          lock                            : { type: mtcs_common.Process                       , comment: "Lock the system" }
          unlock                          : { type: mtcs_common.Process                       , comment: "Unlock the system" }
          reset                           : { type: mtcs_common.Process                       , comment: "Reset any errors" }
          changeOperatingState            : { type: mtcs_common.ChangeOperatingStateProcess   , comment: "Change the operating state (e.g. AUTO, MANUAL, ...)" }
          gotoKnownPosition               : { type: M3GotoKnownPosition                       , comment: "Go to the known position with the given name (only in AUTO mode!)" }
          gotoNewPosition                 : { type: M3GotoNewPosition                         , comment: "Go to the new position with the given settings (only in AUTO mode!)" }
          abort                           : { type: mtcs_common.Process                       , comment: "Abort the goto procedure" }
      calls:
          initialize:
              isEnabled                   : !OR [ statuses.initializationStatus.shutdown,
                                                  statuses.initializationStatus.initializingFailed,
                                                  statuses.initializationStatus.initialized ]
          lock:
              isEnabled                   : !AND [ operatorStatus.tech, statuses.initializationStatus.initialized ]
          unlock:
              isEnabled                   : !AND [ operatorStatus.tech, statuses.initializationStatus.locked ]
          changeOperatingState:
              isEnabled                   : !AND [ statuses.busyStatus.idle, statuses.initializationStatus.initialized ]
          shutdown:
              isEnabled                   : !AND [ statuses.busyStatus.idle, !NOT [ statuses.initializationStatus.shutdown ] ]
          reset:
              isEnabled                   : statuses.healthStatus.bad
          abort:
              isEnabled                   : parts.gotoProcedure.statuses.busyStatus.busy
          gotoKnownPosition:
              isEnabled                   : !AND [ parts.gotoProcedure.isGotoAllowed,
                                                   statuses.initializationStatus.initialized,
                                                   statuses.operatingStatus.auto ]
          gotoNewPosition:
              isEnabled                   : !AND [ parts.gotoProcedure.isGotoAllowed,
                                                   statuses.initializationStatus.initialized,
                                                   statuses.operatingStatus.auto ]
          close:
              isEnabled                   : !AND [ statuses.busyStatus.idle, 
                                                   statuses.initializationStatus.initialized, 
                                                   statuses.operatingStatus.auto ]
          rotation:
              initializationStatus        : statuses.initializationStatus
              operatorStatus              : operatorStatus
              operatingStatus             : statuses.operatingStatus
              config                      : config.rotation
              m3Config                    : config
          translation:
              initializationStatus        : statuses.initializationStatus
              operatorStatus              : operatorStatus
              operatingStatus             : statuses.operatingStatus
              config                      : config.translation
              m3Config                    : config
          gotoProcedure:
              rotation                    : parts.rotation
              translation                 : parts.translation
              m3Config                    : config
          operatingStatus:
              superState                  : statuses.initializationStatus.initialized
          healthStatus:
              isGood                      : !MTCS_SUMMARIZE_GOOD [ parts.rotation, 
                                                                   parts.translation, 
                                                                   parts.gotoProcedure, 
                                                                   parts.io ]
              hasWarning                  : !OR [ !MTCS_SUMMARIZE_WARN [ parts.rotation, 
                                                                         parts.translation, 
                                                                         parts.gotoProcedure,
                                                                         parts.io ],
                                                  !AND [ statuses.busyStatus.idle,
                                                         !EQ [ actualKnownPositionID, 
                                                               M3PositionIDs.UNKNOWN ] ] ]
  
          busyStatus:
              isBusy                      : !OR [ parts.rotation.statuses.busyStatus.busy,
                                                  parts.translation.statuses.busyStatus.busy,
                                                  parts.gotoProcedure.statuses.busyStatus.busy ]
          configManager:
              isEnabled                   : operatorStatus.tech
  
  
  ########################################################################################################################
  # M3GotoProcedure
  ########################################################################################################################
  
  !STATEMACHINE M3GotoProcedure:
      typeOf: [ M3Parts.gotoProcedure ]
      variables:
          state               : { type: M3GotoProcedureStates                   , comment: "New state, to be set by the manual implementation" }
      variables_read_only:
          isGotoAllowed       : { type: t_bool                                  , comment: "TRUE if a goto command is allowed" }
      references:
          rotation            : {}
          translation         : {}
          m3Config            : { type: M3Config, expand: false }
      statuses:
          busyStatus          : { type: mtcs_common.BusyStatus                  , comment: "Is the M3GotoProcedure in a busy state?" }
          healthStatus        : { type: mtcs_common.HealthStatus                , comment: "Is the M3GotoProcedure in a healthy state?" }
      calls:
          busyStatus:
              isBusy          : !NOT [ !OR [ !EQ [ state, M3GotoProcedureStates.IDLE ],
                                             !EQ [ state, M3GotoProcedureStates.ABORTED ],
                                             !EQ [ state, M3GotoProcedureStates.ERROR ] ] ]
          healthStatus:
              isGood          : !NOT [ !EQ [ state, M3GotoProcedureStates.ERROR ] ]
              hasWarning      : !EQ [ state, M3GotoProcedureStates.ABORTED ]
  
  
  ########################################################################################################################
  # M3RotationGoto
  ########################################################################################################################
  
  !PROCESS M3RotationGoto:
      extends: mtcs_common.BaseProcess
      arguments:
          position     : { type: t_double, comment: "Position setpoint of the rotation stage, in degrees" }
          offset       : { type: t_double, comment: "Offset setpoint between the motors of the rotation stage, in degrees" }
  
  
  ########################################################################################################################
  # M3Rotation
  ########################################################################################################################
  
  !STATEMACHINE M3Rotation:
      typeOf                              : [ M3Parts.rotation,
                                              M3GotoProcedure.rotation ]
      variables:
          target                          : { type: M3RotationTarget }
          positiveLimitSwitchActive       : { type: t_bool                        , comment: "TRUE if the positive limit switch is active", address: "%I*" }
          negativeLimitSwitchActive       : { type: t_bool                        , comment: "TRUE if the negative limit switch is active", address: "%I*" }
      variables_read_only:
          actualPosition                  : { type: mtcs_common.AngularPosition     , comment: "The actual position of the rotation" }
          actualPositionError             : { type: mtcs_common.AngularPosition     , comment: "The actual position error of the rotation" }
          actualOffset                    : { type: mtcs_common.AngularPosition     , comment: "The actual offset of the rotation" }
          actualOffsetError               : { type: mtcs_common.AngularPosition     , comment: "The actual offset error of the rotation" }
      references:
          initializationStatus            : { type: mtcs_common.InitializationStatus }
          operatorStatus                  : { type: mtcs_common.OperatorStatus }
          operatingStatus                 : { type: mtcs_common.OperatingStatus }
          config                          : { type: M3RotationConfig }
          m3Config                        : { type: M3Config }
      parts:
          positioningAxis                 : { type: mtcs_common.AngularAxis     , comment: "Positioning axis: SSI encoder + Faulhaber drive" }
          antiBacklashAxis                : { type: mtcs_common.AngularAxis     , comment: "Anti-backlash Axis: Faulhaber drive + hall sensors" }
          positioningDrive                : { type: mtcs_common.FaulhaberDrive  , comment: "Positioning drive" }
          antiBacklashDrive               : { type: mtcs_common.FaulhaberDrive  , comment: "Anti-backlash drive" }
          positioningHallAxis             : { type: mtcs_common.AngularAxis     , comment: "Only hall sensors" }
          gotoProcedure:
              comment                     : "The goto procedure"
              arguments:
                  config                      : {}
                  positioningAxis             : {}
                  antiBacklashAxis            : {}
                  positioningDrive            : {}
                  antiBacklashDrive           : {}
                  positioningHallAxis         : {}
                  target                      : {}
                  positiveLimitSwitchActive   : {}
                  negativeLimitSwitchActive   : {}
                  actualPosition              : {}
                  actualPositionError         : {}
                  actualOffset                : {}
                  actualOffsetError           : {}
              attributes:
                  isGotoAllowed               : {}
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
                          busyStatus      : { type: mtcs_common.BusyStatus   }
          calibrateProcedure:
              comment                     : "The calibration procedure"
              arguments:
                  config                      : {}
                  positioningAxis             : {}
                  antiBacklashAxis            : {}
                  positioningDrive            : {}
                  antiBacklashDrive           : {}
                  positioningHallAxis         : {}
                  target                      : {}
                  actualPosition              : {}
                  actualPositionError         : {}
                  actualOffset                : {}
                  actualOffsetError           : {}
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
                          busyStatus      : { type: mtcs_common.BusyStatus   }
      statuses:
          healthStatus                    : { type: mtcs_common.HealthStatus }
          busyStatus                      : { type: mtcs_common.BusyStatus }
      processes:
          goto                            : { type: M3RotationGoto , comment: "Start moving the rotation stage to the given position" }
          abort                           : { type: mtcs_common.Process      , comment: "Abort any running procedures" }
          reset                           : { type: mtcs_common.Process      , comment: "Reset any errors" }
          calibrate                       : { type: mtcs_common.Process      , comment: "Start calibrating the rotation stage" }
      calls:
          actualPosition:
              newDegreesValue             : parts.positioningAxis.actPos.degrees.value
          actualPositionError:
              newDegreesValue             : !SUB [ actualPosition.degrees.value, target.position.degrees.value ]
          actualOffset:
              newDegreesValue             : !SUB [ parts.antiBacklashAxis.actPos.degrees.value, 
                                                   parts.positioningHallAxis.actPos.degrees.value ]
          actualOffsetError:
              newDegreesValue             : !SUB [ actualOffset.degrees.value, target.offset.degrees.value ]
          target:
              knownPositions              : m3Config.knownPositions
          positioningAxis:
              isEnabled                   : !AND [ operatorStatus.tech, initializationStatus.initialized ]
              standstillTolerance         : config.standstillTolerance
              isGearingSupported          : !BOOL "FALSE"
          antiBacklashAxis:
              isEnabled                   : !AND [ operatorStatus.tech, initializationStatus.initialized ]
              standstillTolerance         : !MUL [ config.standstillTolerance, config.motorToMirrorRatio ]
              isGearingSupported          : !BOOL "TRUE"
          positioningHallAxis:
              isEnabled                   : !BOOL "FALSE" # only encoder axis!
              standstillTolerance         : !MUL [ config.standstillTolerance, config.motorToMirrorRatio ]
              isGearingSupported          : !BOOL "FALSE"
          positioningDrive:
              isEnabled                   : !AND [ operatorStatus.tech, initializationStatus.initialized ]
              config                      : config.positioningDrive
          antiBacklashDrive:
              isEnabled                   : !AND [ operatorStatus.tech, initializationStatus.initialized ]
              config                      : config.antiBacklashDrive
          busyStatus:
              isBusy                      : !OR [ parts.positioningAxis.statuses.busyStatus.busy,
                                                  parts.antiBacklashAxis.statuses.busyStatus.busy,
                                                  parts.positioningDrive.statuses.busyStatus.busy,
                                                  parts.antiBacklashDrive.statuses.busyStatus.busy,
                                                  parts.gotoProcedure.statuses.busyStatus.busy ]
          healthStatus:
              isGood                      : !MTCS_SUMMARIZE_GOOD [ parts.positioningAxis,
                                                                   parts.antiBacklashAxis,
                                                                   parts.positioningDrive,
                                                                   parts.antiBacklashDrive,
                                                                   parts.positioningHallAxis,
                                                                   parts.gotoProcedure ]
              hasWarning                  : !MTCS_SUMMARIZE_WARN [ parts.positioningAxis,
                                                                   parts.antiBacklashAxis,
                                                                   parts.positioningDrive,
                                                                   parts.antiBacklashDrive,
                                                                   parts.positioningHallAxis,
                                                                   parts.gotoProcedure ]
          goto:
              isEnabled                   : !AND [ operatingStatus.manual,
                                                   initializationStatus.initialized,
                                                   parts.gotoProcedure.isGotoAllowed ]
          calibrate:
              isEnabled                   : !AND [ operatingStatus.manual, initializationStatus.initialized ]
          abort:
              isEnabled                   : !OR [ parts.gotoProcedure.statuses.busyStatus.busy,
                                                  parts.calibrateProcedure.statuses.busyStatus.busy ]
          reset:
              isEnabled                   : statuses.healthStatus.bad
          gotoProcedure:
              config                      : config
              positioningAxis             : parts.positioningAxis
              antiBacklashAxis            : parts.antiBacklashAxis
              positioningDrive            : parts.positioningDrive
              antiBacklashDrive           : parts.antiBacklashDrive
              positioningHallAxis         : parts.positioningHallAxis
              target                      : target
              positiveLimitSwitchActive   : positiveLimitSwitchActive
              negativeLimitSwitchActive   : negativeLimitSwitchActive
              actualPosition              : actualPosition
              actualPositionError         : actualPositionError
              actualOffset                : actualOffset
              actualOffsetError           : actualOffsetError
          calibrateProcedure:
              config                      : config
              positioningAxis             : parts.positioningAxis
              antiBacklashAxis            : parts.antiBacklashAxis
              positioningDrive            : parts.positioningDrive
              antiBacklashDrive           : parts.antiBacklashDrive
              positioningHallAxis         : parts.positioningHallAxis
              target                      : target
              actualPosition              : actualPosition
              actualPositionError         : actualPositionError
              actualOffset                : actualOffset
              actualOffsetError           : actualOffsetError
  
  
  ########################################################################################################################
  # M3RotationGotoProcedure
  ########################################################################################################################
  
  !STATEMACHINE M3RotationGotoProcedure:
      typeOf: [ M3RotationParts.gotoProcedure ]
      variables:
          state                       : { type: M3RotateProcedureStates       , comment: "New state, to be set by the manual implementation" }
      variables_read_only:
          isGotoAllowed               : { type: t_bool                        , comment: "TRUE if a goto command is allowed" }
      references:
          config                      : { type: M3RotationConfig              ,  expand: false }
          positioningAxis             : { type: mtcs_common.AngularAxis       ,  expand: false }
          antiBacklashAxis            : { type: mtcs_common.AngularAxis       ,  expand: false }
          positioningDrive            : { type: mtcs_common.FaulhaberDrive    ,  expand: false }
          antiBacklashDrive           : { type: mtcs_common.FaulhaberDrive    ,  expand: false }
          positioningHallAxis         : { type: mtcs_common.AngularAxis       ,  expand: false }
          target                      : { type: M3RotationTarget              ,  expand: false }
          positiveLimitSwitchActive   : { type: t_bool                        ,  expand: false }
          negativeLimitSwitchActive   : { type: t_bool                        ,  expand: false }
          actualPosition              : { type: mtcs_common.AngularPosition   ,  expand: false }
          actualPositionError         : { type: mtcs_common.AngularPosition   ,  expand: false }
          actualOffset                : { type: mtcs_common.AngularPosition   ,  expand: false }
          actualOffsetError           : { type: mtcs_common.AngularPosition   ,  expand: false }
      statuses:
          busyStatus          : { type: mtcs_common.BusyStatus                , comment: "Is the M3RotationGotoProcedure in a busy state?" }
          healthStatus        : { type: mtcs_common.HealthStatus              , comment: "Is the M3RotationGotoProcedure in a healthy state?" }
      calls:
          busyStatus:
              isBusy          : !NOT [ !OR [ !EQ [ state, M3RotateProcedureStates.IDLE ],
                                             !EQ [ state, M3RotateProcedureStates.ABORTED],
                                             !EQ [ state, M3RotateProcedureStates.ERROR ] ] ]
          healthStatus:
              isGood          : !NOT [ !EQ [ state, M3RotateProcedureStates.ERROR ] ]
              hasWarning      : !EQ [ state, M3RotateProcedureStates.ABORTED ]
  
  
  ########################################################################################################################
  # M3RotationCalibrateProcedure
  ########################################################################################################################
  
  !STATEMACHINE M3RotationCalibrateProcedure:
      typeOf: [ M3RotationParts.calibrateProcedure ]
      variables:
          state               : { type: M3CalibrateRotationProcedureStates, comment: "Current state of the " }
      references:
          config              : { type: M3RotationConfig              ,  expand: false }
          positioningAxis     : { type: mtcs_common.AngularAxis       ,  expand: false }
          antiBacklashAxis    : { type: mtcs_common.AngularAxis       ,  expand: false }
          positioningDrive    : { type: mtcs_common.FaulhaberDrive    ,  expand: false }
          antiBacklashDrive   : { type: mtcs_common.FaulhaberDrive    ,  expand: false }
          positioningHallAxis : { type: mtcs_common.AngularAxis       ,  expand: false }
          target              : { type: M3RotationTarget              ,  expand: false }
          actualPosition      : { type: mtcs_common.AngularPosition   ,  expand: false }
          actualPositionError : { type: mtcs_common.AngularPosition   ,  expand: false }
          actualOffset        : { type: mtcs_common.AngularPosition   ,  expand: false }
          actualOffsetError   : { type: mtcs_common.AngularPosition   ,  expand: false }
      statuses:
          busyStatus          : { type: mtcs_common.BusyStatus        , comment: "Is the M3RotationCalibrateProcedure in a busy state?" }
          healthStatus        : { type: mtcs_common.HealthStatus      , comment: "Is the M3RotationCalibrateProcedure in a healthy state?" }
      calls:
          busyStatus:
              isBusy          : !NOT [ !OR [ !EQ [ state, M3CalibrateRotationProcedureStates.IDLE ],
                                             !EQ [ state, M3CalibrateRotationProcedureStates.ABORTED ],
                                             !EQ [ state, M3CalibrateRotationProcedureStates.ERROR ] ] ]
          healthStatus:
              isGood          : !NOT [ !EQ [ state, M3CalibrateRotationProcedureStates.ERROR ] ]
              hasWarning      : !EQ [ state, M3CalibrateRotationProcedureStates.ABORTED ]
  
  
  ########################################################################################################################
  # M3TranslationGoto
  ########################################################################################################################
  
  !PROCESS M3TranslationGoto:
      extends: mtcs_common.BaseProcess
      arguments:
          position     : { type: t_double, comment: "Position setpoint of the translation stage, in millimeters" }
  
  
  ########################################################################################################################
  # M3Translation
  ########################################################################################################################
  
  !STATEMACHINE M3Translation:
      typeOf                              : [ M3Parts.translation,
                                              M3GotoProcedure.translation ]
      variables:
          target                          : { type: M3TranslationTarget }
          positiveLimitSwitchActive       : { type: t_bool                        , comment: "TRUE if the positive limit switch is active", address: "%I*" }
          negativeLimitSwitchActive       : { type: t_bool                        , comment: "TRUE if the negative limit switch is active", address: "%I*" }
      variables_read_only:
          actualPosition                  : { type: mtcs_common.LinearPosition    , comment: "The actual position of the translation" }
          actualPositionError             : { type: mtcs_common.LinearPosition    , comment: "The actual position error of the translation" }
      references:
          initializationStatus            : { type: mtcs_common.InitializationStatus }
          operatorStatus                  : { type: mtcs_common.OperatorStatus }
          operatingStatus                 : { type: mtcs_common.OperatingStatus }
          config                          : { type: M3TranslationConfig }
          m3Config                        : { type: M3Config }
      parts:
          motorAxis                       : { type: mtcs_common.LinearAxis        , comment: "Motor axis" }
          motorDrive                      : { type: mtcs_common.FaulhaberDrive    , comment: "Motor drive" }
          gotoProcedure:
              comment                     : "The goto procedure"
              arguments:
                  config                      : {}
                  motorAxis                   : {}
                  motorDrive                  : {}
                  target                      : {}
                  positiveLimitSwitchActive   : {}
                  negativeLimitSwitchActive   : {}
                  actualPosition              : {}
                  actualPositionError         : {}
              attributes:
                  isGotoAllowed               : {}
                  statuses:
                      attributes:
                          healthStatus        : { type: mtcs_common.HealthStatus }
                          busyStatus          : { type: mtcs_common.BusyStatus   }
          homingProcedure:
              comment                     : "The homing procedure"
              arguments:
                  config                      : {}
                  motorAxis                   : {}
                  motorDrive                  : {}
                  target                      : {}
                  positiveLimitSwitchActive   : {}
                  negativeLimitSwitchActive   : {}
                  actualPosition              : {}
                  actualPositionError         : {}
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
                          busyStatus      : { type: mtcs_common.BusyStatus   }
      statuses:
          healthStatus                    : { type: mtcs_common.HealthStatus }
          busyStatus                      : { type: mtcs_common.BusyStatus }
      processes:
          goto                            : { type: M3TranslationGoto     , comment: "Start moving the translation stage to the given position" }
          reset                           : { type: mtcs_common.Process   , comment: "Reset any errors" }
          abort                           : { type: mtcs_common.Process   , comment: "Abort any running procedures" }
          startHoming                     : { type: mtcs_common.Process   , comment: "Start the homing procedure" }
      calls:
          actualPosition:
              newMillimetersValue         : parts.motorAxis.actPos.millimeters.value
          actualPositionError:
              newMillimetersValue         : !SUB [ actualPosition.millimeters.value, target.position.millimeters.value ]
          target:
              knownPositions              : m3Config.knownPositions
          motorAxis:
              isEnabled                   : !AND [ operatorStatus.tech, initializationStatus.initialized ]
              standstillTolerance         : config.standstillTolerance
              isGearingSupported          : !BOOL "FALSE"
          motorDrive:
              isEnabled                   : !AND [ operatorStatus.tech, initializationStatus.initialized ]
              config                      : config.motorDrive
          busyStatus:
              isBusy                      : parts.motorAxis.statuses.busyStatus.busy
          healthStatus:
              isGood                      : !MTCS_SUMMARIZE_GOOD [ parts.motorAxis,
                                                                   parts.motorDrive,
                                                                   parts.homingProcedure,
                                                                   parts.gotoProcedure ]
              hasWarning                  : !MTCS_SUMMARIZE_WARN [ parts.motorAxis,
                                                                   parts.motorDrive,
                                                                   parts.homingProcedure,
                                                                   parts.gotoProcedure ]
          goto:
              isEnabled                   :  !AND [ operatingStatus.manual,
                                                    initializationStatus.initialized,
                                                    parts.gotoProcedure.isGotoAllowed ]
          gotoProcedure:
              config                      : config
              motorAxis                   : parts.motorAxis
              motorDrive                  : parts.motorDrive
              target                      : target
              positiveLimitSwitchActive   : positiveLimitSwitchActive
              negativeLimitSwitchActive   : negativeLimitSwitchActive
              actualPosition              : actualPosition
              actualPositionError         : actualPositionError
          homingProcedure:
              config                      : config
              motorAxis                   : parts.motorAxis
              motorDrive                  : parts.motorDrive
              target                      : target
              positiveLimitSwitchActive   : positiveLimitSwitchActive
              negativeLimitSwitchActive   : negativeLimitSwitchActive
              actualPosition              : actualPosition
              actualPositionError         : actualPositionError
          reset:
              isEnabled                   : statuses.healthStatus.bad
          abort:
              isEnabled                   : !OR [ parts.gotoProcedure.statuses.busyStatus.busy,
                                                  parts.homingProcedure.statuses.busyStatus.busy ]
          startHoming:
              isEnabled                   : !AND [ operatingStatus.manual, initializationStatus.initialized ]
  
  
  ########################################################################################################################
  # M3TranslationGotoProcedure
  ########################################################################################################################
  
  !STATEMACHINE M3TranslationGotoProcedure:
      typeOf: [ M3TranslationParts.gotoProcedure ]
      variables:
          state                       : { type: M3TranslateProcedureStates    , comment: "New state, to be set by the manual implementation" }
      variables_read_only:
          isGotoAllowed               : { type: t_bool                        , comment: "TRUE if a goto command is allowed" }
      references:
          config                      : { type: M3TranslationConfig           ,  expand: false }
          motorAxis                   : { type: mtcs_common.LinearAxis        ,  expand: false }
          motorDrive                  : { type: mtcs_common.FaulhaberDrive    ,  expand: false }
          target                      : { type: M3TranslationTarget           ,  expand: false }
          positiveLimitSwitchActive   : { type: t_bool }
          negativeLimitSwitchActive   : { type: t_bool }
          actualPosition              : { type: mtcs_common.LinearPosition    ,  expand: false }
          actualPositionError         : { type: mtcs_common.LinearPosition    ,  expand: false }
      statuses:
          busyStatus                  : { type: mtcs_common.BusyStatus        , comment: "Is the M3GotoProcedure in a busy state?" }
          healthStatus                : { type: mtcs_common.HealthStatus      , comment: "Is the M3GotoProcedure in a healthy state?" }
      calls:
          busyStatus:
              isBusy                  : !NOT [ !OR [ !EQ [ state, M3TranslateProcedureStates.IDLE ],
                                                     !EQ [ state, M3TranslateProcedureStates.ABORTED ],
                                                     !EQ [ state, M3TranslateProcedureStates.ERROR ] ] ]
          healthStatus:
              isGood                  : !NOT [ !EQ [ state, M3TranslateProcedureStates.ERROR ] ]
              hasWarning              : !EQ [ state, M3TranslateProcedureStates.ABORTED ]
  
  
  ########################################################################################################################
  # M3TranslationHomingProcedure
  ########################################################################################################################
  
  !STATEMACHINE M3TranslationHomingProcedure:
      typeOf: [ M3TranslationParts.homingProcedure ]
      variables:
          state                       : { type: M3TranslationHomingProcedureStates    , comment: "State to be set by the manual implementation" }
      references:
          config                      : { type: M3TranslationConfig           ,  expand: false }
          motorAxis                   : { type: mtcs_common.LinearAxis        ,  expand: false }
          motorDrive                  : { type: mtcs_common.FaulhaberDrive    ,  expand: false }
          target                      : { type: M3TranslationTarget           ,  expand: false }
          positiveLimitSwitchActive   : { type: t_bool }
          negativeLimitSwitchActive   : { type: t_bool }
          actualPosition              : { type: mtcs_common.LinearPosition    ,  expand: false }
          actualPositionError         : { type: mtcs_common.LinearPosition    ,  expand: false }
      statuses:
          busyStatus                  : { type: mtcs_common.BusyStatus        , comment: "Is the M3GotoProcedure in a busy state?" }
          healthStatus                : { type: mtcs_common.HealthStatus      , comment: "Is the M3GotoProcedure in a healthy state?" }
      calls:
          busyStatus:
              isBusy                  : !NOT [ !OR [ !EQ [ state, M3TranslationHomingProcedureStates.IDLE ],
                                                     !EQ [ state, M3TranslationHomingProcedureStates.ABORTED ],
                                                     !EQ [ state, M3TranslationHomingProcedureStates.ERROR ] ] ]
          healthStatus:
              isGood                  : !NOT [ !EQ [ state, M3TranslationHomingProcedureStates.ERROR] ]
              hasWarning              : !EQ [ state, M3TranslationHomingProcedureStates.ABORTED ]
  
  
  ########################################################################################################################
  # M3IO
  ########################################################################################################################
  
  !STATEMACHINE M3IO:
      typeOf              : [ M3Parts.io ]
      statuses:
          healthStatus    : { type: mtcs_common.HealthStatus   , comment: "Is the I/O in a healthy state?"  }
      parts:
          canOpenBus      : { type: mtcs_common.CANopenBus     , comment: "CANopen bus" }
          coupler         : { type: mtcs_common.EtherCatDevice , comment: "Coupler" }
          slot1           : { type: mtcs_common.EtherCatDevice , comment: "Slot 1" }
          slot2           : { type: mtcs_common.EtherCatDevice , comment: "Slot 2" }
          slot3           : { type: mtcs_common.EtherCatDevice , comment: "Slot 3" }
          slot4           : { type: mtcs_common.EtherCatDevice , comment: "Slot 4" }
      calls:
          coupler:
              id          : !STRING "COUPLER"
              typeId      : !STRING "EK1101"
          slot1:
              id          : !STRING "IODI1"
              typeId      : !STRING "EL1088"
          slot2:
              id          : !STRING "IOEN1"
              typeId      : !STRING "EL5101"
          slot3:
              id          : !STRING "IOEN2"
              typeId      : !STRING "EL5001"
          slot4:
              id          : !STRING "IOCO1"
              typeId      : !STRING "EL6751"
          healthStatus:
              isGood      : !MTCS_SUMMARIZE_GOOD [ parts.coupler,
                                                   parts.slot1,
                                                   parts.slot2,
                                                   parts.slot3,
                                                   parts.slot4 ]
              hasWarning : !MTCS_SUMMARIZE_WARN [ parts.coupler,
                                                  parts.slot1,
                                                  parts.slot2,
                                                  parts.slot3,
                                                  parts.slot4 ]
  
  